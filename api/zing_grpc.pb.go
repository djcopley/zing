// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api/zing.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Zing_Login_FullMethodName         = "/zing.Zing/Login"
	Zing_Logout_FullMethodName        = "/zing.Zing/Logout"
	Zing_ListMessages_FullMethodName  = "/zing.Zing/ListMessages"
	Zing_SendMessage_FullMethodName   = "/zing.Zing/SendMessage"
	Zing_ClearMessages_FullMethodName = "/zing.Zing/ClearMessages"
)

// ZingClient is the client API for Zing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ZingClient interface {
	// Login takes the username and password and returns a token for accessing messages
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Invalidates the user's tokens
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	// Takes a user's id and streams back the messages currently in the server queue
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	// Send a message to a user
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	// Clear all messages for the authenticated user
	ClearMessages(ctx context.Context, in *ClearMessagesRequest, opts ...grpc.CallOption) (*ClearMessagesResponse, error)
}

type zingClient struct {
	cc grpc.ClientConnInterface
}

func NewZingClient(cc grpc.ClientConnInterface) ZingClient {
	return &zingClient{cc}
}

func (c *zingClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, Zing_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zingClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, Zing_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zingClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, Zing_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zingClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, Zing_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zingClient) ClearMessages(ctx context.Context, in *ClearMessagesRequest, opts ...grpc.CallOption) (*ClearMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearMessagesResponse)
	err := c.cc.Invoke(ctx, Zing_ClearMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ZingServer is the server API for Zing service.
// All implementations must embed UnimplementedZingServer
// for forward compatibility.
type ZingServer interface {
	// Login takes the username and password and returns a token for accessing messages
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Invalidates the user's tokens
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	// Takes a user's id and streams back the messages currently in the server queue
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	// Send a message to a user
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	// Clear all messages for the authenticated user
	ClearMessages(context.Context, *ClearMessagesRequest) (*ClearMessagesResponse, error)
	mustEmbedUnimplementedZingServer()
}

// UnimplementedZingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedZingServer struct{}

func (UnimplementedZingServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedZingServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedZingServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedZingServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedZingServer) ClearMessages(context.Context, *ClearMessagesRequest) (*ClearMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearMessages not implemented")
}
func (UnimplementedZingServer) mustEmbedUnimplementedZingServer() {}
func (UnimplementedZingServer) testEmbeddedByValue()              {}

// UnsafeZingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ZingServer will
// result in compilation errors.
type UnsafeZingServer interface {
	mustEmbedUnimplementedZingServer()
}

func RegisterZingServer(s grpc.ServiceRegistrar, srv ZingServer) {
	// If the following call pancis, it indicates UnimplementedZingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Zing_ServiceDesc, srv)
}

func _Zing_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZingServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zing_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZingServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zing_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZingServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zing_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZingServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zing_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZingServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zing_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZingServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zing_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZingServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zing_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZingServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Zing_ClearMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZingServer).ClearMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Zing_ClearMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZingServer).ClearMessages(ctx, req.(*ClearMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Zing_ServiceDesc is the grpc.ServiceDesc for Zing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Zing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "zing.Zing",
	HandlerType: (*ZingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Zing_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Zing_Logout_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _Zing_ListMessages_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Zing_SendMessage_Handler,
		},
		{
			MethodName: "ClearMessages",
			Handler:    _Zing_ClearMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/zing.proto",
}
